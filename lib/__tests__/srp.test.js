const SRP = require('../srp');

// ...

let srp;

// ...

// note: All tests using the test vectors in https://tools.ietf.org/html/rfc5054#appendix-B.
describe('SRP: Generic test vectors', () => {
    beforeEach(() => {
        srp = new SRP(1024);
    });
    
    test('computes A', () => {
        // note: a is to be randomly generated by the client.
        const a = '60975527035CF2AD1989806F0407210BC81EDC04E2762A56AFD529DDDA2D4393';
        const A = srp.A(a);
        
        expect(A.toUpperCase()).toBe(
            '61D5E490F6F1B79547B0704C436F523DD0E560F0C64115BB72557EC4' +
            '4352E8903211C04692272D8B2D1A5358A2CF1B6E0BFCF99F921530EC' +
            '8E39356179EAE45E42BA92AEACED825171E1E8B9AF6D9C03E1327F44' +
            'BE087EF06530E69F66615261EEF54073CA11CF5858F0EDFDFE15EFEA' +
            'B349EF5D76988A3672FAC47B0769447B'
        );
    });
    
    test('computes u', () => {
        const A = 
            '61D5E490F6F1B79547B0704C436F523DD0E560F0C64115BB72557EC4' +
            '4352E8903211C04692272D8B2D1A5358A2CF1B6E0BFCF99F921530EC' +
            '8E39356179EAE45E42BA92AEACED825171E1E8B9AF6D9C03E1327F44' +
            'BE087EF06530E69F66615261EEF54073CA11CF5858F0EDFDFE15EFEA' +
            'B349EF5D76988A3672FAC47B0769447B';
    
        const B = 
            'BD0C61512C692C0CB6D041FA01BB152D4916A1E77AF46AE105393011' +
            'BAF38964DC46A0670DD125B95A981652236F99D9B681CBF87837EC99' +
            '6C6DA04453728610D0C6DDB58B318885D7D82C7F8DEB75CE7BD4FBAA' +
            '37089E6F9C6059F388838E7A00030B331EB76840910440B1B27AAEAE' +
            'EB4012B7D7665238A8E3FB004B117B58';
    
        const u = srp.u(A, B);
        
        expect(u.toUpperCase()).toBe('CE38B9593487DA98554ED47D70A7AE5F462EF019');
    });
    
    test('computes k', () => {
        const k = srp.k(
            'EEAF0AB9ADB38DD69C33F80AFA8FC5E86072618775FF3C0B9EA2314C' +
            '9C256576D674DF7496EA81D3383B4813D692C6E0E0D5D8E250B98BE4' +
            '8E495C1D6089DAD15DC7D7B46154D6B6CE8EF4AD69B15D4982559B29' +
            '7BCF1885C529F566660E57EC68EDBC3C05726CC02FD4CBF4976EAA9A' +
            'FD5138FE8376435B9FC61D2FC0EB06E3',
            2
        );
    
        expect(k.toUpperCase()).toBe('7556AA045AEF2CDD07ABAF0F665C3E818913186F')
    });
    
    test('computes x', () => {
        const I = 'alice';
        const P = 'password123';
        const s = 'BEB25379D1A8581EB5A727673A2441EE'; // salt, received from server.
    
        const x = srp.x(I, P, s);
    
        expect(x.toUpperCase()).toBe('94B7555AABE9127CC58CCF4993DB6CF84D16C124');
    });
    
    test('computes S', () => {
        const B = 
            'BD0C61512C692C0CB6D041FA01BB152D4916A1E77AF46AE105393011' +
            'BAF38964DC46A0670DD125B95A981652236F99D9B681CBF87837EC99' +
            '6C6DA04453728610D0C6DDB58B318885D7D82C7F8DEB75CE7BD4FBAA' +
            '37089E6F9C6059F388838E7A00030B331EB76840910440B1B27AAEAE' +
            'EB4012B7D7665238A8E3FB004B117B58';
    
        const k = '7556AA045AEF2CDD07ABAF0F665C3E818913186F';
        const x = '94B7555AABE9127CC58CCF4993DB6CF84D16C124';
        const a = '60975527035CF2AD1989806F0407210BC81EDC04E2762A56AFD529DDDA2D4393';
        const u = 'CE38B9593487DA98554ED47D70A7AE5F462EF019';
    
        const S = srp.S(B, k, x, a, u);
    
        expect(S.toUpperCase()).toBe(
            'B0DC82BABCF30674AE450C0287745E7990A3381F63B387AAF271A10D' +
            '233861E359B48220F7C4693C9AE12B0A6F67809F0876E2D013800D6C' +
            '41BB59B6D5979B5C00A172B4A2A5903A0BDCAF8A709585EB2AFAFA8F' +
            '3499B200210DCC1F10EB33943CD67FC88A2F39A4BE5BEC4EC0A3212D' +
            'C346D7E474B29EDE8A469FFECA686E5A'
        );
    });
});

describe('SRP:ATV test vectors', () => {
    const a = 'a18b940d3e1302e932a64defccf560a0714b3fa2683bbe3cea808b3abfa58b7d';
    const I = '366B4165DD64AD3A';
    const P = '1234';
    const s = 'd62c98fe76c77ad445828c33063fc36f';
    const B = '4223ddb35967419ddfece40d6b552b797140129c1c262da1b83d413a7f9674aff834171336dabadf9faa95962331e44838d5f66c46649d583ee44827755651215dcd5881056f7fd7d6445b844ccc5793cc3bbd5887029a5abef8b173a3ad8f81326435e9d49818275734ef483b2541f4e2b99b838164ad5fe4a7cae40599fa41bd0e72cb5495bdd5189805da44b7df9b7ed29af326bb526725c2b1f4115f9d91e41638876eeb1db26ef6aed5373f72e3907cc72997ee9132a0dcafda24115730c9db904acbed6d81dc4b02200a5f5281bf321d5a3216a709191ce6ad36d383e79be76e37a2ed7082007c51717e099e7bedd7387c3f82a916d6aca2eb2b6ff3f3';
    const K = '9a689113a76b44583e73f9662eb172e830886ed988f04c6c0030f0e93c68784de27dbf30c5d151fb';

    beforeEach(() => {
        srp = new SRP(2048);
    });

    test('computes K and M1', () => {
        const K = srp.K(I, P, s, a, B);
        expect(K).toBe('9a689113a76b44583e73f9662eb172e830886ed988f04c6c0030f0e93c68784de27dbf30c5d151fb');

        const M1 = srp.M1(I, P, s, a, B);
        expect(M1).toBe('4b4e638bf08526e4229fd079675fedfd329b97ef');
    });
});